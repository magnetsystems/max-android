/*
 * Copyright (c) 2015 Magnet Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * File generated by Magnet Magnet Lang Tool on Apr 20, 2015 11:05:23 AM
 * @see {@link http://developer.magnet.com}
 */

package com.magnet.max.android.tests.testsubjects.model;

import java.util.Date;

import static org.assertj.core.api.Assertions.assertThat;

public class ModelWithAllTypes {

  
  
  private Short shortAttribute;

  
  private Integer intAttribute;

  
  private SubModel subModelAttribute;

  
  private java.util.List<SubModel> listOfModelsAttribute;

  
  private Integer integerAttribute;

  
  private java.util.List<Double> listOfDoublesAttribute;

  
  private java.util.List<String> listOfCharactersAttribute;

  
  private Boolean booleanAttribute;

  
  private java.util.List<Integer> listOfIntegersAttribute;

  
  private java.util.List<Short> listOfShortsAttribute;

  
  private Float floatAttribute;

  
  private java.util.List<String> listOfBytesAttribute;

  
  private Byte byteAttribute;

  
  private java.util.List<Integer> listOfLongsAttribute;

  
  private Double doubleAttribute;

  
  private Long longAttribute;

  
  private EnumAttribute enumAttribute;

  
  private java.util.List<String> listOfStringsAttribute;

  
  private Character charAttribute;

  
  private String stringAttribute;

  
  private java.util.List<Float> listOfFloatsAttribute;

  
  private java.util.List<String> listOfEnumsAttribute;

  
  private java.util.List<Boolean> listOfBooleansAttribute;

  private Date createdAt;

  public Short getShortAttribute() {
    return shortAttribute;
  }

  public Integer getIntAttribute() {
    return intAttribute;
  }

  public SubModel getSubModelAttribute() {
    return subModelAttribute;
  }

  public java.util.List<SubModel> getListOfModelsAttribute() {
    return listOfModelsAttribute;
  }

  public Integer getIntegerAttribute() {
    return integerAttribute;
  }

  public java.util.List<Double> getListOfDoublesAttribute() {
    return listOfDoublesAttribute;
  }

  public java.util.List<String> getListOfCharactersAttribute() {
    return listOfCharactersAttribute;
  }

  public Boolean getBooleanAttribute() {
    return booleanAttribute;
  }

  public java.util.List<Integer> getListOfIntegersAttribute() {
    return listOfIntegersAttribute;
  }

  public java.util.List<Short> getListOfShortsAttribute() {
    return listOfShortsAttribute;
  }

  public Float getFloatAttribute() {
    return floatAttribute;
  }

  public java.util.List<String> getListOfBytesAttribute() {
    return listOfBytesAttribute;
  }

  public Byte getByteAttribute() {
    return byteAttribute;
  }

  public java.util.List<Integer> getListOfLongsAttribute() {
    return listOfLongsAttribute;
  }

  public Double getDoubleAttribute() {
    return doubleAttribute;
  }

  public Long getLongAttribute() {
    return longAttribute;
  }

  public EnumAttribute getEnumAttribute() {
    return enumAttribute;
  }

  public java.util.List<String> getListOfStringsAttribute() {
    return listOfStringsAttribute;
  }

  public Character getCharAttribute() {
    return charAttribute;
  }

  public String getStringAttribute() {
    return stringAttribute;
  }

  public java.util.List<Float> getListOfFloatsAttribute() {
    return listOfFloatsAttribute;
  }

  public java.util.List<String> getListOfEnumsAttribute() {
    return listOfEnumsAttribute;
  }

  public java.util.List<Boolean> getListOfBooleansAttribute() {
    return listOfBooleansAttribute;
  }

  public Date getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  @Override
  public boolean equals(Object object) {
    if(null == object) {
      return false;
    }

    ModelWithAllTypes theOther = (ModelWithAllTypes) object;
    //assertThat(intAttribute).isEqualTo(theOther.getIntAttribute()));
    assertThat(stringAttribute).isEqualTo(theOther.getStringAttribute());
    assertThat(subModelAttribute).isEqualTo(theOther.getSubModelAttribute());
    //assertThat(shortAttribute).isEqualTo(theOther.getShortAttribute());
    assertThat(integerAttribute).isEqualTo(theOther.getIntegerAttribute());
    assertThat(listOfModelsAttribute).isEqualTo(theOther.getListOfModelsAttribute());
    assertThat(listOfDoublesAttribute).isEqualTo(theOther.getListOfDoublesAttribute());
    //assertThat(booleanAttribute).isEqualTo(theOther.getBooleanAttribute());
    assertThat(listOfCharactersAttribute).isEqualTo(theOther.getListOfCharactersAttribute());
    //assertThat(floatAttribute).isEqualTo(theOther.getFloatAttribute()));
    assertThat(listOfShortsAttribute).isEqualTo(theOther.getListOfShortsAttribute());
    assertThat(listOfIntegersAttribute).isEqualTo(theOther.getListOfIntegersAttribute());
    //assertThat(byteAttribute).isEqualTo(theOther.getByteAttribute()));
    assertThat(listOfBytesAttribute).isEqualTo(theOther.getListOfBytesAttribute());
    assertThat(listOfLongsAttribute).isEqualTo(theOther.getListOfLongsAttribute());
    //assertThat(doubleAttribute).isEqualTo(theOther.getDoubleAttribute()));
    //assertThat(longAttribute).isEqualTo(theOther.getLongAttribute()));
    assertThat(enumAttribute).isEqualTo(theOther.getEnumAttribute());
    assertThat(listOfStringsAttribute).isEqualTo(theOther.getListOfStringsAttribute());
    //assertThat(charAttribute).isEqualTo(theOther.getCharAttribute()));
    assertThat(stringAttribute).isEqualTo(theOther.getStringAttribute());
    assertThat(listOfFloatsAttribute).isEqualTo(theOther.getListOfFloatsAttribute());
    assertThat(listOfEnumsAttribute).isEqualTo(theOther.getListOfEnumsAttribute());
    assertThat(listOfBooleansAttribute).isEqualTo(theOther.getListOfBooleansAttribute());

    return true;
    
//    return assertThat(intAttribute).isEqualTo(theOther.getIntAttribute()));
//            assertThat(stringAttribute).isEqualTo(theOther.getStringAttribute()));
//            assertThat(subModelAttribute).isEqualTo(theOther.getSubModelAttribute()));
//            assertThat(shortAttribute).isEqualTo(theOther.getShortAttribute()));
//            assertThat(integerAttribute).isEqualTo(theOther.getIntegerAttribute()));
//            assertThat(listOfModelsAttribute).isEqualTo(theOther.getListOfModelsAttribute()));
//            assertThat(listOfDoublesAttribute).isEqualTo(theOther.getListOfDoublesAttribute()));
//            assertThat(booleanAttribute).isEqualTo(theOther.getBooleanAttribute()));
//            assertThat(listOfCharactersAttribute).isEqualTo(theOther.getListOfCharactersAttribute()));
//            assertThat(floatAttribute).isEqualTo(theOther.getFloatAttribute()));
//            assertThat(listOfShortsAttribute).isEqualTo(theOther.getListOfShortsAttribute()));
//            assertThat(listOfIntegersAttribute).isEqualTo(theOther.getListOfIntegersAttribute()));
//            assertThat(byteAttribute).isEqualTo(theOther.getByteAttribute()));
//            assertThat(listOfBytesAttribute).isEqualTo(theOther.getListOfBytesAttribute()));
//            assertThat(listOfLongsAttribute).isEqualTo(theOther.getListOfLongsAttribute()));
//            assertThat(doubleAttribute).isEqualTo(theOther.getDoubleAttribute()));
//            assertThat(longAttribute).isEqualTo(theOther.getLongAttribute()));
//            assertThat(enumAttribute).isEqualTo(theOther.getEnumAttribute()));
//            assertThat(listOfStringsAttribute).isEqualTo(theOther.getListOfStringsAttribute()));
//            assertThat(charAttribute).isEqualTo(theOther.getCharAttribute()));
//            assertThat(stringAttribute).isEqualTo(theOther.getStringAttribute()));
//            assertThat(listOfFloatsAttribute).isEqualTo(theOther.getListOfFloatsAttribute()));
//            assertThat(listOfEnumsAttribute).isEqualTo(theOther.getListOfEnumsAttribute()));
//            assertThat(listOfBooleansAttribute).isEqualTo(theOther.getListOfBooleansAttribute());
  }

  /**
  * Builder for ModelWithAllTypes
  **/
  public static class ModelWithAllTypesBuilder {
    private ModelWithAllTypes toBuild = new ModelWithAllTypes();

    public ModelWithAllTypesBuilder() {
    }

    public ModelWithAllTypes build() {
      return toBuild;
    }

    public ModelWithAllTypesBuilder shortAttribute(Short value) {
      toBuild.shortAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder intAttribute(Integer value) {
      toBuild.intAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder subModelAttribute(SubModel value) {
      toBuild.subModelAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfModelsAttribute(java.util.List<SubModel> value) {
      toBuild.listOfModelsAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder integerAttribute(Integer value) {
      toBuild.integerAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfDoublesAttribute(java.util.List<Double> value) {
      toBuild.listOfDoublesAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfCharactersAttribute(java.util.List<String> value) {
      toBuild.listOfCharactersAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder booleanAttribute(Boolean value) {
      toBuild.booleanAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfIntegersAttribute(java.util.List<Integer> value) {
      toBuild.listOfIntegersAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfShortsAttribute(java.util.List<Short> value) {
      toBuild.listOfShortsAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder floatAttribute(Float value) {
      toBuild.floatAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfBytesAttribute(java.util.List<String> value) {
      toBuild.listOfBytesAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder byteAttribute(Byte value) {
      toBuild.byteAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfLongsAttribute(java.util.List<Integer> value) {
      toBuild.listOfLongsAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder doubleAttribute(Double value) {
      toBuild.doubleAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder longAttribute(Long value) {
      toBuild.longAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder enumAttribute(EnumAttribute value) {
      toBuild.enumAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfStringsAttribute(java.util.List<String> value) {
      toBuild.listOfStringsAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder charAttribute(Character value) {
      toBuild.charAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder stringAttribute(String value) {
      toBuild.stringAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfFloatsAttribute(java.util.List<Float> value) {
      toBuild.listOfFloatsAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfEnumsAttribute(java.util.List<String> value) {
      toBuild.listOfEnumsAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder listOfBooleansAttribute(java.util.List<Boolean> value) {
      toBuild.listOfBooleansAttribute = value;
      return this;
    }

    public ModelWithAllTypesBuilder createdAt(Date value) {
      toBuild.createdAt = value;
      return this;
    }
  }
}

/*
 * Copyright (c) 2015 Magnet Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * File generated by Magnet Magnet Lang Tool on Jul 9, 2015 1:41:57 PM
 * @see {@link http://developer.magnet.com}
 */

package com.magnet.max.android.logging;

import android.text.TextUtils;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.UUID;

public class EventLog extends LogEntry {
  public static final String ATTRIBUTE_MESSAGE = "__message";
  public static final String ATTRIBUTE_STACKTRACE = "__stacktrace";

  public static final String TYPE_EVENT = "event";
  public static final String TYPE_LOG = "LOG";

  private java.util.List<String> tags;

  
  private String category;
  
  private String name;

  private String identifier;

  
  private String subCategory;

  
  private String location;

  
  private java.util.Map<String, String> payload;

  
  private String type;

  
  private Long utctime;

  public String getIdentifier() {
    return identifier;
  }

  public java.util.List<String> getTags() {
    return tags;
  }

  public String getCategory() {
    return category;
  }

  public String getName() {
    return name;
  }

  public String getSubCategory() {
    return subCategory;
  }

  public String getLocation() {
    return location;
  }

  public java.util.Map<String, String> getPayload() {
    return payload;
  }

  public String getType() {
    return type;
  }

  public Long getUtctime() {
    return utctime;
  }

  /**
  * Builder for LogEvent
  **/
  private static abstract class LogEventBuilder<T extends LogEventBuilder> {
    protected EventLog toBuild = new EventLog();

    public T tags(java.util.List<String> value) {
      toBuild.tags = value;
      return (T) this;
    }

    public T category(String value) {
      toBuild.category = value;
      return (T) this;
    }

    public T correlationId(String value) {
      toBuild.correlationId = value;
      return (T) this;
    }

    public T name(String value) {
      toBuild.name = value;
      return (T) this;
    }

    public T subCategory(String value) {
      toBuild.subCategory = value;
      return (T) this;
    }

    public T location(String value) {
      toBuild.location = value;
      return (T) this;
    }
  }

  /**
   * Builder for Event
   **/
  public static class EventBuilder extends LogEventBuilder<EventBuilder> {

    public EventBuilder() {
    }

    public EventLog build() {
      toBuild.identifier = UUID.randomUUID().toString();
      toBuild.utctime = System.currentTimeMillis() ;//TimeUtil.getUtcTimestamp();
      toBuild.type = TYPE_EVENT;
      return toBuild;
    }

    public EventBuilder payload(java.util.Map<String, String> value) {
      toBuild.payload = value;
      return this;
    }

    public EventBuilder type(String value) {
      toBuild.type = value;
      return this;
    }
  }

  /**
   * Builder for Log
   **/
  public static class LogBuilder extends LogEventBuilder<LogBuilder> {

    public LogBuilder() {
    }

    public EventLog build() {
      toBuild.identifier = UUID.randomUUID().toString();
      toBuild.utctime = System.currentTimeMillis(); //TimeUtil.getUtcTimestamp();
      toBuild.type = TYPE_LOG;
      return toBuild;
    }

    public LogBuilder message(String value) {
      if(!TextUtils.isEmpty(value)) {
        if (null == toBuild.payload) {
          toBuild.payload = new HashMap<>();
        }
        toBuild.payload.put(ATTRIBUTE_MESSAGE, value);
      }
      return this;
    }

    public LogBuilder stackTrace(Throwable value) {
      if(null != value) {
        if (null == toBuild.payload) {
          toBuild.payload = new HashMap<>();
        }
        toBuild.payload.put(ATTRIBUTE_STACKTRACE, getStackTrace(value));
      }
      return this;
    }

    private String getStackTrace(Throwable th) {
      StringWriter sw = new StringWriter();
      PrintWriter pw = new PrintWriter(sw);
      th.printStackTrace(pw);
      return sw.toString();
    }
  }
}
